generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]

  @@map("users")
}

model Member {
  id                    String        @unique @default(uuid())
  email                 String        @unique
  name                  String
  nickname              String       
  cpf                   BigInt        @unique
  rg                    BigInt        @unique
  educationInstituition String        
  ra                    Int?          @unique
  course                String
  yearOfGraduation      Int           
  phoneNumber           BigInt        @unique 
  dateOfBirth           String        
  yearOfJoinOnRugbyMaua Int           
  instagram             String        @unique
  lawsLink              String        
  readyLink             String        
  team                  String
  uniformSize           String        
  uniformNumber         Int?       
  paymentRecord         Int[]         @default([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  isPaying              Boolean       @default(true)   
  Payments              Payment[]

  @@map("members")
  @@unique([id, name])
}

model Payment {
  id          String   @unique @default(uuid())
  memberName  String   
  memberId    String   
  date        DateTime @unique @default(now())
  value       Float
  cause       String
  type        String?

  member Member @relation(fields: [memberId, memberName], references: [id, name], onDelete: Cascade)

  @@map("payments")
}
